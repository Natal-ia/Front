@page "/espacios"
@model JaveFamilia.Pages.EspaciosModel
@{
    ViewData["Title"] = "Espacios Disponibles";
}


<head>
    <link rel="stylesheet" href="/css/styles.css">
</head>



<h1>Espacios Disponibles</h1>

<!-- Barra buscadora -->
<input type="text" id="searchBar" placeholder="Buscar espacios..." oninput="filterSpaces()" class="search-bar" />

<!-- Lista de espacios -->
<ul id="spacesList">
    @foreach (var espacio in Model.Espacios)
    {
        <li class="space-item">
            <div class="space-info">
                <h2>@espacio.Name</h2>
                <p>@espacio.Description</p>
                <p>Horario: @espacio.OpeningTime - @espacio.ClosingTime</p>
                <p>Capacidad: @espacio.Capacity personas</p>
                <p>Tarifa de afiliado: $@espacio.AffiliateRate</p>
                <p>Tarifa de no Afiliado: $@espacio.NonAffiliateRate</p>
                <p>Tarifa de beneficiario: $@espacio.BeneficiaryRate</p>
            </div>

            <!-- Contenedor de horarios -->
            <div class="horarios-container">
                <h3>Horarios disponibles</h3>
                <ul id="horarios-@espacio.Id" class="horarios">
                    @foreach (var horario in espacio.Horarios)
                    {
                        <li>
                            <span>@horario.StartTime - @horario.EndTime</span>
                            @if (horario.Availavility)
                            {
                                <button onclick="makeReservation('@espacio.Id', '@horario.Id')" class="btn btn-primary">Reservar</button>
                            }
                            else
                            {
                                <button class="btn btn-secondary" disabled>No Disponible</button>
                            }
                        </li>
                    }
                </ul>
            </div>
        </li>
    }
</ul>


<script>
    // Mostrar/ocultar horarios
    function toggleHorario(id) {
        const horarios = document.getElementById(horarios-${id});
        horarios.style.display = horarios.style.display === "none" ? "block" : "none";
    }

    // Filtrar espacios por nombre
    function filterSpaces() {
        const query = document.getElementById("searchBar").value.toLowerCase();
        const items = document.querySelectorAll(".space-item");
        items.forEach(item => {
            const spaceName = item.querySelector("h2").textContent.toLowerCase();
            item.style.display = spaceName.includes(query) ? "block" : "none";
        });
    }

    async function makeReservation(espacioId, horarioId) {
        const usuarioID = "usuario123"; // Ejemplo: Obtén esto dinámicamente
        const reserva = {
            usuarioID: usuarioID,
            espacioID: espacioId,
            horarioID: horarioId,
            fechaAgendamiento: new Date().toISOString(),
            fechaReserva: new Date().toISOString(),
            estadoPago: "Pendiente"
        };

        const response = await fetch('/api/reserva', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(reserva)
        });

        const result = await response.json();

        if (response.ok) {
            alert("Reserva exitosa!");
            // Marcar espacio como no disponible en la interfaz
            location.reload();
        } else {
            alert("Hubo un problema con la reserva: " + result.message);
        }
    }
</script>

